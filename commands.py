import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeChat
from telegram.ext import ContextTypes, ConversationHandler
from database import get_user, add_to_user_balance, set_user_balance, get_all_user_ids
from states import GET_URL, GET_TOPUP_METHOD

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç URL."""
    user_id = update.effective_user.id
    user = get_user(user_id)
    _, balance, _ = user

    # Set commands for the user
    admin_ids_str = os.environ.get("ADMIN_USER_IDS", "")
    admin_ids = [id.strip() for id in admin_ids_str.split(',')]
    logger.info(f"Admin IDs: {admin_ids}")
    logger.info(f"User ID: {user_id}")

    base_commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand(command="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="topup", description="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
    ]
    if str(user_id) in admin_ids:
        logger.info("User is an admin, adding admin commands.")
        base_commands.append(BotCommand(command="addshorts", description="–î–æ–±–∞–≤–∏—Ç—å —à–æ—Ä—Ç—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
        base_commands.append(BotCommand(command="setbalance", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
        base_commands.append(BotCommand(command="broadcast", description="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
    
    await context.bot.delete_my_commands(scope=BotCommandScopeChat(chat_id=user_id))
    await context.bot.set_my_commands(base_commands, scope=BotCommandScopeChat(chat_id=user_id))

    if balance <= 0:
        await update.message.reply_text("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à–æ—Ä—Ç—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return ConversationHandler.END

    context.user_data.clear()
    context.user_data['config'] = {}
    context.user_data['balance'] = balance
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {balance} —à–æ—Ä—Ç—Å–æ–≤. \n–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏—Ä–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏–∫–∏."
    )
    return GET_URL

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∏ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏—Ä—É—Å–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ YouTube —Ä–æ–ª–∏–∫–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/balance - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "/topup - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    )
    await update.message.reply_text(help_text)

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    _, balance, _ = get_user(user_id)
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='topup_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —à–æ—Ä—Ç—Å–æ–≤.", reply_markup=reply_markup)

async def topup_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the top-up process."""
    keyboard = [
        [
            InlineKeyboardButton("‚≠êÔ∏è Telegram Stars", callback_data='topup_stars'),
            InlineKeyboardButton("üíé CryptoBot", callback_data='topup_crypto'),
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_topup')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
    return GET_TOPUP_METHOD


async def add_shorts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Adds a specified amount of shorts to a user's balance."""
    admin_ids_str = os.environ.get("ADMIN_USER_IDS", "")
    admin_ids = [id.strip() for id in admin_ids_str.split(',')]
    if str(update.effective_user.id) not in admin_ids:
        return

    try:
        user_id_str, amount_str = context.args
        user_id = int(user_id_str)
        amount = int(amount_str)

        if amount <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–æ—Ä—Ç—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        add_to_user_balance(user_id, amount)
        _, new_balance, _ = get_user(user_id)

        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —à–æ—Ä—Ç—Å–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}.")

    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addshorts <user_id> <amount>")

async def set_user_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sets a user's balance to a specified amount."""
    admin_ids_str = os.environ.get("ADMIN_USER_IDS", "")
    admin_ids = [id.strip() for id in admin_ids_str.split(',')]
    if str(update.effective_user.id) not in admin_ids:
        return

    try:
        user_id_str, amount_str = context.args
        user_id = int(user_id_str)
        amount = int(amount_str)

        if amount < 0:
            await update.message.reply_text("–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return

        set_user_balance(user_id, amount)
        _, new_balance, _ = get_user(user_id)

        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {new_balance}.")

    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbalance <user_id> <amount>")

from states import GET_URL, GET_TOPUP_METHOD, GET_BROADCAST_MESSAGE

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the broadcast conversation."""
    admin_ids_str = os.environ.get("ADMIN_USER_IDS", "")
    admin_ids = [id.strip() for id in admin_ids_str.split(',')]
    if str(update.effective_user.id) not in admin_ids:
        return ConversationHandler.END

    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —é–∑–µ—Ä–∞–º. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
    return GET_BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Sends a broadcast message to all users."""
    text = update.message.text or update.message.caption
    photo = update.message.photo[-1].file_id if update.message.photo else None
    animation = update.message.animation.file_id if update.message.animation else None

    user_ids = get_all_user_ids()
    sent_count = 0
    failed_count = 0

    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for user_id in user_ids:
        try:
            if photo:
                await context.bot.send_photo(chat_id=user_id, photo=photo, caption=text)
            elif animation:
                await context.bot.send_animation(chat_id=user_id, animation=animation, caption=text)
            elif text:
                await context.bot.send_message(chat_id=user_id, text=text)
            sent_count += 1
        except Exception as e:
            logger.error(f"Failed to send message to {user_id}: {e}")
            failed_count += 1

    await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}. –û—à–∏–±–æ–∫: {failed_count}.")
    return ConversationHandler.END

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels the broadcast."""
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END